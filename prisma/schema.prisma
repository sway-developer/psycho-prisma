generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id String @id

  role        String
  name        String
  surname     String
  lastName    String
  password    String
  firstTimer  Boolean   @default(true)
  phoneNumber String    @unique
  sessions    Session[]
  imageURL    String    @default("")

  group String @default("Общая группа")

  rank                   String
  division               String
  dateOfBirth            String @default("")
  recruitedBy            String @default("")
  servingKind            String @default("Срочная служба")
  servingPeriod          String @default("1 период (1-6 месяцев)")
  recruitmentDate        String @default("")
  recoveryQuestionAnswer String @default("Фамилия")

  city       String @default("")
  region     String @default("")
  address    String @default("")
  building   String @default("")
  appartment String @default("")

  summaries UserSummary[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Session {
  id        String   @id
  expiresAt DateTime

  user   User   @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId String
}

model Category {
  id    String @id @default(uuid())
  name  String
  forms Form[]
  tests Test[]
}

model Form {
  id          String @id @default(uuid())
  name        String @unique
  description String @default("")

  ttc       Int     @default(5)
  group     String  @default("")
  questions String
  adminOnly Boolean @default(false)

  categories Category[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FormSubmission {
  id String @id @default(uuid())

  userId     String
  formId     String
  submission String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Test {
  id String @id @default(uuid())

  ttc         Int    @default(5)
  name        String @unique
  description String @default("")
  instruction String @default("")

  scales    String
  strategy  String
  questions String

  stanTable    String
  tGradeTable  String
  summaryTable String

  categories Category[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TestSubmission {
  id String @id @default(uuid())

  userId     String
  testId     String
  summary    String
  submission String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSummary {
  id              String   @id @default(uuid())
  user            User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String?  @unique
  verdict         String
  additionalNotes String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
